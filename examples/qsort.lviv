; qsort.lviv
; quicksort implemented in lviv

; filter2
; given a predicate in slot 0 and a list in slot 1
; filter the list into two lists, one for which the
; predicate is true and one for which it is false
( (*tList *fList)                          ; if the list is null, return the true and false lists
  (*lList uncons (*tList cons *fList)      ; otherwise, take the first element, cons it to tlist
                 (*fList cons *tList swap) ; or flist as appropriate
                 3 pick *pred apply if     ; (test whether to cons to tList or fList)
   3 roll ***pred eval *filt2Hlp)          ; then get the stack back in order and call again
  *lList null? if )                        ; (test whether list is null)
(*tList *fList *lList *pred) lambda *filt2Hlp define

( () () *lList **pred eval *filt2Hlp )     ; call the helper function with empty tList and fList
(*lList *pred) lambda *filt2 define

; qsort: use the first element of the list as the pivot
; filter the list and qsort the resulting lists
( (*lList)                             ; if it's 0 or 1 elm long, just return it
  (*lList uncons dup 3 unroll          ; otherwise, get the next pivot, save off the pivot
   (***n <) cons (***n) lambda filt2   ; filter the list into greater and lesser lists
   *qsort swap                         ; sort the first part
   *qsort 3 roll :cons                 ; sort the second part, then replace the pivot
   append                              ; append them, and we're sorted
  )
  (#t) (*lList cdr null?) *lList null? if if )
(*lList) lambda *qsort define

; some digits of pi grouped into twos for testing the sorting
;( 31 37 83 87 52 88 65 87 53 32 08 38 14 20 61 71 77 66 91 47 30 35 98 25 34
;  90 42 87 55 46 87 31 15 95 62 86 38 82 35 37 87 59 37 51 95 77 81 85 77 80
;  53 21 71 22 68 06 61 30 01 92 78 76 61 11 95 90 92 16 42 01 98 93 80 95 25
;  72 01 31 37 83 87 52 88 65 87 53 32 08 38 14 20 61 71 77 66 91 47 30 35 98
;  25 34 90 42 87 55 46 87 31 15 95 62 86 38 82 35 37 87 59 37 51 95 77 81 85
;  77 80 53 21 71 22 68 06 61 30 01 92 78 76 61 11 95 90 92 16 42 01 98 93 80
;  95 25 72 01 14 15 92 65 35 89 79 32 38 46 26 43 38 32 79 50 28 84 19 71 69
;  39 93 75 10 58 20 97 49 44 59 23 07 81 64 06 28 62 08 99 86 28 03 48 25 34
;  21 17 06 79 82 14 80 86 51 32 82 30 66 47 09 38 44 60 95 50 58 22 31 72 53
;  59 40 81 28 48 1 ) *testList define

( 141 592 653 589 793 238 462 643 383 279 502 884 197 169 399 375 105
820 974 944 592 307 816 406 286 208 998 628 034 825 342 117 067 982 148
086 513 282 306 647 093 844 609 550 582 231 725 359 408 128 481 117 450
284 102 701 938 521 105 559 644 622 948 954 930 381 964 428 810 975 665
933 446 128 475 648 233 786 783 165 271 201 909 145 648 566 923 460 348
610 454 326 648 213 393 607 260 249 141 273 724 587 006 606 315 588 174
881 520 920 962 829 254 091 715 364 367 892 590 360 011 330 530 548 820
466 521 384 146 951 941 511 609 433 057 270 365 759 591 953 092 186 117
381 932 611 793 105 118 548 074 462 379 962 749 567 351 885 752 724 891
227 938 183 011 949 129 833 673 362 440 656 643 086 021 394 946 395 224
737 190 702 179 860 943 702 770 539 217 176 293 176 752 384 674 818 467
669 405 132 000 568 127 145 263 560 827 785 771 342 757 789 609 173 637
178 721 468 440 901 224 953 430 146 549 585 371 050 792 279 689 258 923
542 019 956 112 129 021 960 864 034 418 159 813 629 774 771 309 960 518
707 211 349 999 998 372 978 049 951 059 731 732 816 096 318 595 024 459
455 346 908 302 642 522 308 253 344 685 035 261 931 188 171 010 003 137
838 752 886 587 533 208 381 420 617 177 669 147 303 598 253 490 428 755
468 731 159 562 863 882 353 787 593 751 957 781 857 780 532 171 226 806
613 001 927 876 611 195 909 216 420 198 938 095 257 201 065 485 863 278
865 936 153 381 827 968 230 301 952 035 301 852 968 995 773 622 599 413
891 249 721 775 283 479 131 515 574 857 242 454 150 695 950 829 533 116
861 727 855 889 075 098 381 754 637 464 939 319 255 060 400 927 701 671
139 009 848 824 012 858 361 603 563 707 660 104 710 181 942 955 596 198
946 767 837 449 448 255 379 774 726 847 104 047 534 646 208 046 684 259
069 491 293 313 677 028 989 152 104 752 162 056 966 024 058 038 150 193
511 253 382 430 035 587 640 247 496 473 263 914 199 272 604 269 922 796
782 354 781 636 009 341 721 641 219 924 586 315 030 286 182 974 555 706
749 838 505 494 588 586 926 995 690 927 210 797 509 302 955 321 165 344
987 202 755 960 236 480 665 499 119 881 834 797 753 566 369 807 426 542
527 862 551 818 417 574 672 890 977 772 793 800 081 647 060 016 145 249
192 173 217 214 772 350 141 441 973 568 548 161 361 157 352 552 133 475
741 849 468 438 523 323 907 394 143 334 547 762 416 862 518 983 569 485
562 099 219 222 184 272 550 254 256 887 671 790 494 601 653 466 804 988
627 232 791 786 085 784 383 827 967 976 681 454 100 953 883 786 360 950
680 064 225 125 205 117 392 984 896 084 128 488 626 945 604 241 965 285
022 210 661 186 306 744 278 622 039 194 945 047 123 713 786 960 956 364
371 917 287 467 764 657 573 962 413 890 865 832 645 995 813 390 478 027
590 099 465 764 078 951 269 468 398 352 595 709 825 822 620 522 489 407
726 719 478 268 482 601 476 990 902 640 136 394 437 455 305 068 203 496
252 451 749 399 651 431 429 809 190 659 250 937 221 696 461 515 709 858
387 410 597 885 959 772 975 498 930 161 753 928 468 138 268 683 868 942
774 155 991 855 925 245 953 959 431 049 972 524 680 845 987 273 644 695
848 653 836 736 222 626 099 124 608 051 243 884 390 451 244 136 549 762
780 797 715 691 435 997 700 129 616 089 441 694 868 555 848 406 353 422
072 225 828 488 648 158 456 028 506 016 842 739 452 267 467 678 895 252
138 522 549 954 666 727 823 986 456 596 116 354 886 230 577 456 498 035
593 634 568 174 324 112 515 076 069 479 451 096 596 094 025 228 879 710
893 145 669 136 867 228 748 940 560 101 503 308 617 928 680 920 874 760
917 824 938 589 009 714 909 675 985 261 365 549 781 893 129 784 821 682
998 948 722 658 804 857 564 014 270 477 555 132 379 641 451 523 746 234
364 542 858 444 795 265 867 821 051 141 354 735 739 523 113 427 166 102
135 969 536 231 442 952 484 937 187 110 145 765 403 590 279 934 403 742
007 310 578 539 062 198 387 447 808 478 489 683 321 445 713 868 751 943
506 430 218 453 191 048 481 005 370 614 680 674 919 278 191 197 939 952
061 419 663 428 754 440 643 745 123 718 192 179 998 391 015 919 561 814
675 142 691 239 748 940 907 186 494 231 961 567 945 208 095 146 550 225
231 603 881 930 142 093 762 137 855 956 638 937 787 083 039 069 792 077
346 722 182 562 599 661 501 421 503 068 038 447 734 549 202 605 414 665
925 201 497 442 850 732 518 666 002 132 434 088 190 710 486 331 734 649
651 453 905 796 268 561 005 508 106 658 796 998 163 574 736 384 052 571
459 102 897 064 140 110 971 206 280 439 039 759 515 677 157 700 420 337
869 936 007 230 558 763 176 359 421 873 125 147 120 532 928 191 826 186
125 867 321 579 198 414 848 829 164 470 609 575 270 695 722 091 756 711
672 291 098 169 091 528 017 350 671 274 858 322 287 183 520 935 396 572
512 108 357 915 136 988 209 144 421 006 751 033 467 110 314 126 711 136
990 865 851 639 831 501 970 165 151 168 517 143 765 761 835 155 650 884
909 989 859 982 387 345 528 331 635 507 647 918 535 893 226 185 489 632
132 933 089 857 064 204 675 259 070 915 481 416 549 859 461 637 180 270
981 994 309 924 488 957 571 282 890 592 323 326 097 299 712 084 433 573
265 489 382 391 193 259 746 366 730 583 604 142 813 883 032 038 249 037
589 852 437 441 702 913 276 561 809 377 344 403 070 746 921 120 191 302
033 038 019 762 110 110 044 929 321 516 084 244 485 963 766 983 895 228
684 783 123 552 658 213 144 957 685 726 243 344 189 303 968 642 624 341
077 322 697 802 807 318 915 441 101 044 682 325 271 620 105 265 227 211
166 039 666 557 309 254 711 055 785 376 346 682 065 310 989 652 691 862
056 476 931 257 058 635 662 018 558 100 729 360 659 876 486 117 910 453
348 850 346 113 657 686 753 249 441 668 039 626 579 787 718 556 084 552
965 412 665 408 530 614 344 431 858 676 975 145 661 406 800 700 237 877
659 134 401 712 749 470 420 562 230 538 994 561 314 071 127 000 407 854
733 269 939 081 454 664 645 880 797 270 826 683 063 432 858 785 698 305
235 808 933 065 757 406 795 457 163 775 254 202 114 955 761 581 400 250
126 228 594 130 216 471 550 979 259 230 990 796 547 376 125 517 656 751
357 517 829 666 454 779 174 501 129 961 489 030 463 994 713 296 210 734
043 751 895 735 961 458 901 938 971 311 179 042 978 285 647 503 203 198
691 514 028 708 085 990 480 109 412 147 221 317 947 647 772 622 414 254
854 540 332 157 185 306 142 288 137 585 043 063 321 751 829 798 662 237
172 159 160 771 669 254 748 738 986 654 949 450 114 654 062 843 366 393
790 039 769 265 672 146 385 306 736 096 571 209 180 763 832 716 641 627
488 880 078 692 560 290 228 472 104 031 721 186 082 041 900 042 296 617
119 637 792 133 757 511 495 950 156 604 963 186 294 726 547 364 252 308
177 036 751 590 673 502 350 728 354 056 704 038 674 351 362 222 477 158
915 049 530 984 448 933 309 634 087 807 693 259 939 780 541 934 144 737
744 184 263 129 860 809 988 868 741 326 047 215 695 162 396 586 457 302
163 159 819 319 516 735 381 297 416 772 947 867 242 292 465 436 680 098
067 692 823 828 068 996 400 482 435 403 701 416 314 965 897 940 924 323
789 690 706 977 942 236 250 822 168 895 738 379 862 300 159 377 647 165
122 893 578 601 588 161 755 782 973 523 344 604 281 512 627 203 734 314
653 197 777 416 031 990 665 541 876 397 929 334 419 521 541 341 899 485
444 734 567 383 162 499 341 913 181 480 927 777 103 863 877 343 177 207
545 654 532 207 770 921 201 905 166 096 280 490 926 360 197 598 828 161
332 316 663 652 861 932 668 633 606 273 567 630 354 477 628 035 045 077
723 554 710 585 954 870 279 081 435 624 014 517 180 624 643 626 794 561
275 318 134 078 330 336 254 232 783 944 975 382 437 205 835 311 477 119
926 063 813 346 776 879 695 970 309 833 913 077 109 870 408 591 337 464
144 282 277 263 465 947 047 458 784 778 720 192 771 528 073 176 790 770
715 721 344 473 060 570 073 349 243 693 113 835 049 316 312 840 425 121
925 651 798 069 411 352 801 314 701 304 781 643 788 518 529 092 854 520
116 583 934 196 562 134 914 341 595 625 865 865 570 552 690 496 520 985
803 385 072 242 648 293 972 858 478 316 305 777 756 068 887 644 624 824
685 792 603 953 527 734 803 048 029 005 876 075 825 104 747 091 643 961
362 676 044 925 627 420 420 832 085 661 190 625 454 337 213 153 595 845
068 772 460 290 161 876 679 524 061 634 252 257 719 542 916 299 193 064
553 779 914 037 340 432 875 262 888 963 995 879 ) dup *testList define

qsort ; run quicksort on the list

